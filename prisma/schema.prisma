// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String              @id @default(uuid())
  googleId          String?
  githubId          String?
  username          String              @default(uuid())
  accountId         String?
  password          String?
  age               Int?
  weight            Json
  bodyFatPercentage Int?
  goal              Goal?
  email             String              @unique
  preferences       Json
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  workouts          Workout[]
  performedWorkouts PerformedWorkout[]
  performedExercise PerformedExercise[]
  gender            String
}

model Goal {
  id                String @id @default(uuid())
  userId            String @unique
  user              User   @relation(fields: [userId], references: [id])
  lifts             Json
  weight            Int?
  bodyFatPercentage Int?
}

model MuscleGroups {
  id        String     @id @default(uuid())
  name      String
  exercises Exercise[]
}

model Exercise {
  id                String              @id @default(uuid())
  name              String
  workout           Workout[]
  performedExercise PerformedExercise[]
  muscleGroups      MuscleGroups        @relation(fields: [muscleGroupsId], references: [id])
  muscleGroupsId    String
  reps              Int
  sets              Int
  standardized      Boolean
}

// Workout model is a reference for exercises a user Could perform
model Workout {
  id               String             @id @default(uuid())
  name             String
  performedWorkout PerformedWorkout[]
  exercises        Exercise[]
  user             User?              @relation(fields: [userId], references: [id])
  userId           String?
}

// Performed exercises are unique for every single performed workout
model PerformedExercise {
  id                 String           @id @default(uuid())
  exerciseId         String?
  exercise           Exercise?        @relation(fields: [exerciseId], references: [id])
  performedWorkoutId String
  performedWorkout   PerformedWorkout @relation(fields: [performedWorkoutId], references: [id])
  user               User?            @relation(fields: [userId], references: [id])
  userId             String?
  sets               PerformedSet[]
  date               DateTime?        @default(now())
}

model PerformedSet {
  id                  String             @id @default(uuid())
  performedExerciseId String?
  performedExercise   PerformedExercise? @relation(fields: [performedExerciseId], references: [id])
  index               Int // index tells you what order the set was performed in the workout
  reps                Int
  weight              Float
  unit                String?
  rtf                 Int?
}

// Performed workouts are unique for every single workout
model PerformedWorkout {
  id                 String              @id @default(uuid())
  workout            Workout?            @relation(fields: [workoutId], references: [id])
  workoutId          String?
  performedExercises PerformedExercise[]
  date               DateTime            @default(now())
  user               User                @relation(fields: [userId], references: [id])
  userId             String
}
