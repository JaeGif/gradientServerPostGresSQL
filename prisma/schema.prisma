// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String             @id @default(uuid())
  googleId          String?
  githubId          String?
  username          String             @unique @default(uuid())
  accountId         String?
  password          String?
  age               Int
  level             String?
  email             String?
  preferences       Json?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  workouts          Workout[]
  performedWorkouts PerformedWorkout[]
  performedExercise PerformedExercise?
}

model MuscleGroups {
  id        String     @id @default(uuid())
  name      String
  exercises Exercise[]
}

model Exercise {
  id                String             @id @default(uuid())
  name              String
  workout           Workout[]
  performedExercise PerformedExercise?
  muscleGroups      MuscleGroups       @relation(fields: [muscleGroupsId], references: [id])
  muscleGroupsId    String
  reps              Int
  sets              Int
}

// Workout model is a reference for exercises a user Could perform
model Workout {
  id               String            @id @default(uuid())
  name             String
  performedWorkout PerformedWorkout?
  exercises        Exercise[]
  user             User?             @relation(fields: [userId], references: [id])
  userId           String?
}

// Performed exercises are unique for every single performed workout
model PerformedExercise {
  id               String             @id @default(uuid())
  exerciseId       String?            @unique
  exercise         Exercise?          @relation(fields: [exerciseId], references: [id])
  performedWorkout PerformedWorkout[]
  user             User?              @relation(fields: [userId], references: [id])
  userId           String?            @unique
  weight           Float?
  unit             String?
  reps             Int
  sets             Int
  rtf              Int?
  date             DateTime?          @default(now())
}

// Performed workouts are unique for every single workout
// Performed Workout contains the exercises actually performed, with sets and reps
model PerformedWorkout {
  id                 String              @id @default(uuid())
  workout            Workout?            @relation(fields: [workoutId], references: [id])
  workoutId          String?             @unique
  performedExercises PerformedExercise[]
  date               DateTime            @default(now())
  user               User                @relation(fields: [userId], references: [id])
  userId             String
}
